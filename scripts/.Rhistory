install.packages(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("shiny")
library("shiny")
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
View(my_ui)
library("shiny")
shinyApp(ui = my_ui, server = my_server)
library("shiny")
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
library("shiny")
# The UI is the result of calling the `fluidPage()` layout function
my_ui <- fluidPage(
# A static content element: a 2nd level header that displays text
h2("Greetings from Shiny"),
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
sliderInput(
inputId = "age",           # key this value will be assigned to
label = "Age of subjects", # label to display alongside the slider
min = 18,                  # minimum slider value
max = 80,                  # maximum slider value
value = 42                 # starting value for the slider
)
)
# The server is a function that takes `input` and `output` arguments
my_server <- function(input, output) {
# Assign a value to the `message` key in the `output` list using
# the renderText() method, creating a value the UI can display
output$message <- renderText({
# This block is like a function that will automatically rerun
# when a referenced `input` value changes
# Use the `username` key from `input` to create a value
message_str <- paste0("Hello ", input$username, "!")
# Return the value to be rendered by the UI
message_str
})
}
shinyApp(ui = my_ui, server = my_server)
runApp('fun/shinny_example.R')
library(shiny)
library(dplyr)
View(midwest)
midwest$popblack
library(ggplot2)
View(midwest)
#second one
#comment this out after first run
crime <- read.csv("../data/crime_modified.csv", stringsAsFactors = FALSE)
setwd("~/Info201/ba6-project/scripts")
#second one
#comment this out after first run
crime <- read.csv("../data/crime_modified.csv", stringsAsFactors = FALSE)
shiny::runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
getwd()
setwd("/Users/mabochen/Info201/ba6-project/scripts")
crime <- read.csv("../data/crime_modified.csv", stringsAsFactors = FALSE)
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
third <- function(a) {
setwd("/Users/mabochen/Info201/ba6-project/scripts")
crime <- read.csv("../data/crime_modified.csv", stringsAsFactors = FALSE)
four <- nrow(crime[which(crime$Neighborhood == a & crime$Year == "2014"), ])
five <- nrow(crime[which(crime$Neighborhood == a & crime$Year == "2015"), ])
six <- nrow(crime[which(crime$Neighborhood == a & crime$Year == "2016"), ])
seven <- nrow(crime[which(crime$Neighborhood == a & crime$Year == "2017"), ])
eight <- nrow(crime[which(crime$Neighborhood == a & crime$Year == "2018"), ])
#plot(c(four,five,six,seven,eight))
chart_df <- data.frame(year=c("2014", "2015", "2016", "2017", "2018"),
Num=c(four, five, six, seven, eight))
bar_graph <-ggplot(data=chart_df, aes(x=year, y=Num, fill = year)) +
geom_bar(stat="identity") +
geom_text(aes(label=Num), vjust=-0.3, size=3.5)+
theme_minimal()+
xlab("Year")+
ylab("Police Reports")
bar_graph
}
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
runApp('~/Info201/ba6-project')
