shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = horate)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urban_map()
devtools::install_github(“UrbanInstitute/urbnmapr”)
library(tidyverse)
library(urbnmapr)
runApp('~/Downloads/BF--Final-Project-master/bf_project')
library(plotly)
install.packages(plotly)
install.packages("plotly")
runApp('~/Downloads/BF--Final-Project-master/bf_project')
install.packages("lubridate")
runApp('~/Downloads/BF--Final-Project-master/bf_project')
library(ggmap)
counties <- map_data('county')
MASS <- map_data('county', 'massachusetts')
circle_scale_amt <- 0.05
ggplot(MASS, aes(long,lat, group = group)) +
geom_polygon(aes(fill = subregion),colour = "black") +
geom_point(data = MASS2, aes(x = long, y = lat),
size = MASS2$teacher_count * circle_scale_amt,
color = "red", alpha = 0.6)+
scale_size_continuous(range = range(MASS2$teacher_count)) +
theme(legend.position="none") +
coord_quickmap()
library(ggmap)
install.packages("ggmap")
library(ggmap)
counties <- map_data('county')
MASS <- map_data('county', 'massachusetts')
circle_scale_amt <- 0.05
ggplot(MASS, aes(long,lat, group = group)) +
geom_polygon(aes(fill = subregion),colour = "black") +
geom_point(data = MASS2, aes(x = long, y = lat),
size = MASS2$teacher_count * circle_scale_amt,
color = "red", alpha = 0.6)+
scale_size_continuous(range = range(MASS2$teacher_count)) +
theme(legend.position="none") +
coord_quickmap()
library(ggmap)
library(dplyr)
library(ggplot2)
map.seattle_city <- qmap("seattle", zoom = 11, source="stamen", maptype="toner",darken = c(.3,"#BBBBBB"))
map.seattle_city
library(devtools)
install_github("hrbrmstr/ggcounty")
library(ggcounty)
maine <- ggcounty("Maine")
maine$gg
install_github("hrbrmstr/ggcounty")
library(devtools)
install.packages("devtools")
install_github("hrbrmstr/ggcounty")
install_github(repo, username = NULL, ref = "master", subdir = NULL,
auth_token = github_pat(quiet), host = "https://api.github.com",
quiet = FALSE, ...)
install.packages(data.table)
devtools::install_github("arunsrinivasan/cran.stats")
install_github("hrbrmstr/ggcounty")
install.packages("devtools")
install.packages("dplyr")
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("broom")
install.packages("devtools")
install.packages("ggplot2")
install_github("hrbrmstr/ggcounty")
library(devtools)
install_github("hrbrmstr/ggcounty")
library(ggcounty)
maine <- ggcounty("Maine")
maine$gg
library(ggcounty)
maine <- ggcounty("Maine")
library(devtools)
install_github("hrbrmstr/ggcounty")
library(ggcounty)
maine <- ggcounty("Maine")
maine$gg
library(devtools)
install_github("hrbrmstr/ggcounty")
library(ggcounty)
maine <- ggcounty("Maine")
#' Returns a ggplot2 object with a geom_map of the requested county
#'
#' @param state name string (e.g. + default = "Maine")
#' @param fill color string (e.g. + default = "white")
#' @param border color string (e.g. + default = "#7f7f7f")
#' @param border line width (e.g. + default = 0.25)
#' @param fill alpha (e.g. + default = 1)
#' @return list consisting of the fortified map object (map), list of county names (county.names) & the ggplot2 object (gg)
#' @export
#' @examples
#' g <- ggcounty("New York")
ggcounty <- function(state="Maine", fips=FALSE, fill="white",
color="#7f7f7f", size=0.25, alpha=1) {
# http://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html
state.names <- c("alabama", "alaska", "arizona", "arkansas", "california",
"colorado", "connecticut", "delaware", "districtofcolumbia",
"florida", "georgia", "hawaii", "idaho", "illinois",
"indiana", "iowa", "kansas", "kentucky", "louisiana",
"maine", "maryland", "massachusetts", "michigan", "minnesota",
"mississippi", "missouri", "montana", "nebraska", "nevada",
"newhampshire", "newjersey", "newmexico", "newyork",
"northcarolina", "northdakota", "ohio", "oklahoma", "oregon",
"pennsylvania", "rhodeisland", "southcarolina", "southdakota",
"tennessee", "texas", "utah", "vermont", "virginia",
"washington", "westvirginia", "wisconsin", "wyoming")
state <- tolower(gsub("\ ", "", state))
if (!state %in% state.names) { return(NULL) }
require(sp)
require(maptools)
require(ggplot2)
county.file <- system.file(package="ggcounty", "counties", sprintf("%s.shp", state))
cty <- readShapePoly(county.file, repair=TRUE, IDvar=ifelse(fips,"FIPS","NAME"))
cty.f <- fortify(cty, region=ifelse(fips,"FIPS","NAME"))
gg <- ggplot()
cnty.geom <- geom_map(data=cty.f, map = cty.f, aes(map_id=id, x=long, y=lat),
fill=fill, color=color, size=size, alpha=alpha)
gg <- gg + cnty.geom
gg <- gg + coord_map()
gg <- gg + labs(x="", y="")
gg <- gg + theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
return(list(map=cty.f, county.names=unique(cty.f$id), gg=gg, geom=cnty.geom))
}
#' Returns a ggplot2 object with a geom_map of the the lower 48 states (you can grab Hawaii & Alaska separately and map them in)
#'
#' @param fill color string (e.g. + default = "white")
#' @param border color string (e.g. + default = "#7f7f7f")
#' @param border line width (e.g. + default = 0.25)
#' @param fill alpha (e.g. + default = 1)
#' @return list consisting of the fortified map object (map), list of FIPS ids (fips) & the ggplot2 object (gg)
#' @export
#' @examples
#' g <- ggcounty.us()
ggcounty.us <- function(fill="white", color="#7f7f7f", size=0.25, alpha=1) {
# http://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html
require(sp)
require(maptools)
require(ggplot2)
us.file <- system.file(package="ggcounty", "counties", "48.shp")
cty <- readShapePoly(us.file, repair=TRUE, IDvar="FIPS")
cty.f <- fortify(cty, region="FIPS")
gg <- ggplot()
gg <- gg + geom_map(data=cty.f, map = cty.f, aes(map_id=id, x=long, y=lat),
fill=fill, color=color, size=size, alpha=alpha)
gg <- gg + coord_map()
gg <- gg + labs(x="", y="")
gg <- gg + theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
return(list(map=cty.f, fips=unique(cty.f$id), gg=gg))
}
ggcounty("New York")
library(maptools)
install.packages("maptools")
#' Returns a ggplot2 object with a geom_map of the requested county
#'
#' @param state name string (e.g. + default = "Maine")
#' @param fill color string (e.g. + default = "white")
#' @param border color string (e.g. + default = "#7f7f7f")
#' @param border line width (e.g. + default = 0.25)
#' @param fill alpha (e.g. + default = 1)
#' @return list consisting of the fortified map object (map), list of county names (county.names) & the ggplot2 object (gg)
#' @export
#' @examples
#' g <- ggcounty("New York")
ggcounty <- function(state="Maine", fips=FALSE, fill="white",
color="#7f7f7f", size=0.25, alpha=1) {
# http://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html
state.names <- c("alabama", "alaska", "arizona", "arkansas", "california",
"colorado", "connecticut", "delaware", "districtofcolumbia",
"florida", "georgia", "hawaii", "idaho", "illinois",
"indiana", "iowa", "kansas", "kentucky", "louisiana",
"maine", "maryland", "massachusetts", "michigan", "minnesota",
"mississippi", "missouri", "montana", "nebraska", "nevada",
"newhampshire", "newjersey", "newmexico", "newyork",
"northcarolina", "northdakota", "ohio", "oklahoma", "oregon",
"pennsylvania", "rhodeisland", "southcarolina", "southdakota",
"tennessee", "texas", "utah", "vermont", "virginia",
"washington", "westvirginia", "wisconsin", "wyoming")
state <- tolower(gsub("\ ", "", state))
if (!state %in% state.names) { return(NULL) }
require(sp)
require(maptools)
require(ggplot2)
county.file <- system.file(package="ggcounty", "counties", sprintf("%s.shp", state))
cty <- readShapePoly(county.file, repair=TRUE, IDvar=ifelse(fips,"FIPS","NAME"))
cty.f <- fortify(cty, region=ifelse(fips,"FIPS","NAME"))
gg <- ggplot()
cnty.geom <- geom_map(data=cty.f, map = cty.f, aes(map_id=id, x=long, y=lat),
fill=fill, color=color, size=size, alpha=alpha)
gg <- gg + cnty.geom
gg <- gg + coord_map()
gg <- gg + labs(x="", y="")
gg <- gg + theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
return(list(map=cty.f, county.names=unique(cty.f$id), gg=gg, geom=cnty.geom))
}
#' Returns a ggplot2 object with a geom_map of the the lower 48 states (you can grab Hawaii & Alaska separately and map them in)
#'
#' @param fill color string (e.g. + default = "white")
#' @param border color string (e.g. + default = "#7f7f7f")
#' @param border line width (e.g. + default = 0.25)
#' @param fill alpha (e.g. + default = 1)
#' @return list consisting of the fortified map object (map), list of FIPS ids (fips) & the ggplot2 object (gg)
#' @export
#' @examples
#' g <- ggcounty.us()
ggcounty.us <- function(fill="white", color="#7f7f7f", size=0.25, alpha=1) {
# http://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html
require(sp)
require(maptools)
require(ggplot2)
us.file <- system.file(package="ggcounty", "counties", "48.shp")
cty <- readShapePoly(us.file, repair=TRUE, IDvar="FIPS")
cty.f <- fortify(cty, region="FIPS")
gg <- ggplot()
gg <- gg + geom_map(data=cty.f, map = cty.f, aes(map_id=id, x=long, y=lat),
fill=fill, color=color, size=size, alpha=alpha)
gg <- gg + coord_map()
gg <- gg + labs(x="", y="")
gg <- gg + theme(plot.background = element_rect(fill = "transparent", colour = NA),
panel.border = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
return(list(map=cty.f, fips=unique(cty.f$id), gg=gg))
}
ggcounty("New York")
g <- ggcounty("New York")
g <- ggcounty("alabama")
ggcounty("Maine")
ggcounty("Maine")
library(devtools)
# Download Library (read Notes)
install_github("nicholasbucher/ggcountymx")
library(ggcountymx)
# Load dataset to Enviroment (read Notes)
data(geomx)
BCS <- ggcountymx("03")  # Entity code as Character
BCS$gg
# Load dataset to Enviroment (read Notes)
data(geomx)
BCS <- ggcountymx("03")  # Entity code as Character
BCS$gg
shiny::runApp('~/Downloads/ShinyHeatmapExampleSeattleCrime-master')
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
install.packages("Rcpp")
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
install_github('ramnathv/rCharts', force= TRUE)
install_github('ramnathv/rCharts', force= TRUE)
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts', force= TRUE)
library(rCharts)
library(rjson)
library(shiny)
runApp('~/Downloads/ShinyHeatmapExampleSeattleCrime-master')
runApp('~/Downloads/ShinyHeatmapExampleSeattleCrime-master')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
library(shinythemes)
install.packages("leaflet")
install.packages("shinythemes")
install.packages("ggvis")
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
install.packages("rgdal")
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
library(shiny)
library(leaflet)
library(shinythemes)
library(ggvis)
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
runApp('~/Downloads/seattle-neighborhood-viz-master/app')
countydata %>%
left_join(counties, by = "county_fips") %>%
filter(state_name =="California") %>%
ggplot(mapping = aes(long, lat, group = group, fill = horate)) +
geom_polygon(color = "#ffffff", size = .25) +
scale_fill_gradientn(labels = scales::percent,
guide = guide_colorbar(title.position = "top")) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
theme(legend.title = element_text(),
legend.key.width = unit(.5, "in")) +
labs(fill = "Homeownership rate") +
theme_urban_map()
devtools::install_github(“UrbanInstitute/urbnmapr”)
library(plyr)
library(dplyr)
library(maps)
library(ggmap)
library(devtools)
devtools::install_github("dkahle/ggmap")
##SET MAP PARAMETERS
seattle<-get_map(location = "Seattle", zoom = 12)
Seattle<-qmap("seattle",zoom = 14, color = "color")
##LOAD SPD CRIME NUMBERS
SeattleCrimes<-read.csv("Seattle_Police_Department_Police_Report_Incident.csv")
###SUBSET VIOLENT CRIMES
SeattleCrimeMap<-subset(SeattleCrimes, Summarized.Offense.Description %in% c("ASSAULT",
"HOMICIDE",
"DISPUTE",
"BURGLARY",
"WEAPON",
"BURGLARY-SECURE PARKING-",
"NARCOTICS",
"PROSTITUTION",
"ROBBERY"))
###PLOT SPD NUMBERS ONTO MAP
##POINTS
ggmap(seattle)+
geom_point(data = SeattleCrimeMap,
aes(x=Longitude, y=Latitude, colour = Summarized.Offense.Description))
###BUBBLE CHART
Seattle+geom_point(data = SeattleCrimeMap,
aes(x = Longitude, y=Latitude, colour = Summarized.Offense.Description,
size = Summarized.Offense.Description))
###BINNED POINTS
Seattle+stat_bin2d(data = SeattleCrimeMap,
aes(x=Longitude,y=Latitude,colour = Summarized.Offense.Description,fill = Summarized.Offense.Description),
size = .5, bins = 30, alpha = 1/2)
library(plyr)
library(dplyr)
library(maps)
library(ggmap)
install.packages("maps")
library(maps)
library(ggmap)
library(devtools)
##SET MAP PARAMETERS
seattle<-get_map(location = "Seattle", zoom = 12)
Seattle<-qmap("seattle",zoom = 14, color = "color")
##LOAD SPD CRIME NUMBERS
SeattleCrimes<-read.csv("Seattle_Police_Department_Police_Report_Incident.csv")
###SUBSET VIOLENT CRIMES
SeattleCrimeMap<-subset(SeattleCrimes, Summarized.Offense.Description %in% c("ASSAULT",
"HOMICIDE",
"DISPUTE",
"BURGLARY",
"WEAPON",
"BURGLARY-SECURE PARKING-",
"NARCOTICS",
"PROSTITUTION",
"ROBBERY"))
###PLOT SPD NUMBERS ONTO MAP
##POINTS
ggmap(seattle)+
geom_point(data = SeattleCrimeMap,
aes(x=Longitude, y=Latitude, colour = Summarized.Offense.Description))
###BUBBLE CHART
Seattle+geom_point(data = SeattleCrimeMap,
aes(x = Longitude, y=Latitude, colour = Summarized.Offense.Description,
size = Summarized.Offense.Description))
###BINNED POINTS
Seattle+stat_bin2d(data = SeattleCrimeMap,
aes(x=Longitude,y=Latitude,colour = Summarized.Offense.Description,fill = Summarized.Offense.Description),
size = .5, bins = 30, alpha = 1/2)
##SET MAP PARAMETERS
seattle<-get_map(location = "Seattle", zoom = 12)
runApp('~/Downloads/ShinyHeatmapExampleSeattleCrime-master')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("leaflet")
shiny::runApp()
